{{- $is_core := eq .ps "core" -}}
# Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser
# if (!(Test-Path -Path $PROFILE )) { New-Item -Type File -Path $PROFILE -Force }
{{- if $is_core }}

# Update-Module -Name oh-my-posh -AllowPrerelease -Scope CurrentUser
Import-Module posh-git
Import-Module oh-my-posh

$MyPrompt = Join-Path (Split-Path -Path "$PROFILE") "dre_posh.json"
if (Test-Path($MyPrompt)) {
    Set-PoshPrompt -Theme "$MyPrompt"
} else {
    Set-PoshPrompt -Theme powerlevel10k_lean
}
{{ end }}
# PSReadLine
Import-Module PSReadLine
Set-PSReadLineOption -EditMode Emacs
Set-PSReadlineKeyHandler -Key UpArrow -Function HistorySearchBackward
Set-PSReadlineKeyHandler –Key DownArrow -Function HistorySearchForward

Set-PSReadlineKeyHandler –Key Ctrl+RightArrow -Function ForwardWord
Set-PSReadlineKeyHandler –Key Ctrl+LeftArrow -Function BackwardWord

# Chocolatey profile
$ChocolateyProfile = "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
if (Test-Path($ChocolateyProfile)) {
  Import-Module "$ChocolateyProfile"
}
{{ if $is_core }}
function git-alt {
    echo "Setting git to atgb"
    git config user.email "{{ .data.git.alt_email }}"
    git config user.name "{{ .data.git.alt_name }}"
}

function git-main {
    echo "Setting git to cosandr"
    git config user.email "{{ .data.git.main_email }}"
    git config user.name "{{ .data.git.main_name }}"
}

function ssh-dresrv-x {
    $env:DISPLAY="localhost:0.0"
    ssh DreSRV-X
    Remove-Item env:DISPLAY
}

function pip-req {
    pip install -U pip wheel setuptools
    pip install -U -r requirements.txt
}

function pip-req-dev {
    pip install -U -r requirements_dev.txt
}

function ssh-mon([int] $x = 147, [int] $y = 36) {
    $extra = "--suppress-tmux-version-warning=SUPPRESS-TMUX-VERSION-WARNING"
    Start-Process -FilePath alacritty.exe -ArgumentList "-t `"DreSRV Monitoring`" -d $x $y --hold -e ssh -t root@DreSRV tmuxinator start hjd $extra"
}
{{ end }}
$HOSTS = "C:\Windows\System32\drivers\etc\hosts"
$env:EDITOR="vim"

# Aliases (and functions acting as aliases)
{{ if $is_core }}
{{- range $k, $v := .data.check.files }}
{{- $fp := print "//dresrv.hm/" $v -}}
{{ if stat $fp }}function logs-{{ $k }} { Get-Content {{ $fp }} -Wait -Tail 10 }{{ end }}
{{- end }}

{{- if lookPath "docker" }}
function dls { docker container ls -a --format "table {{ "{{.Names}}" }}\t{{ "{{.Status}}" }}\t{{ "{{.RunningFor}}" }}\t" }
function dlog { docker logs -f $args }
function dex { docker exec -t $args }
function dsti { docker container start -i $args }
{{- end }}
{{- end }}
function touch ($file) { Write-Output "" >> "$file" }
function la { Get-ChildItem -Force $args }
function ll { Get-ChildItem $args }
function sudoedit { Start-Process -Verb runAs vim $args }
function sudo-wt { Start-Process -Verb runAs wt.exe $args }
function rm-rf { Remove-Item -Recurse -Force $args }
function st { Start-Process "C:\Program Files\Sublime Text 3\sublime_text.exe" $args }
function git-sign { git config commit.gpgsign true }
function cd-chezmoi { Set-Location $(chezmoi source-path) }
function reboot { Restart-Computer -Confirm }
function poweroff { Stop-Computer -Confirm }

function which {
    $c = Get-Command $args
    if ($c.CommandType -eq "Application") {
        $c.Source
    } elseif ($c.CommandType -eq "Function") {
        $c.ScriptBlock
    } else {
        $c
    }
}

function Set-Dev {
    Import-Module "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\Tools\Microsoft.VisualStudio.DevShell.dll";
    Enter-VsDevShell -SkipAutomaticLocation 1291dbd5
}
{{ if $is_core }}
function Set-Venv([String] $Path = "~\venv", [String] $LocalPath = ".\venv") {
    # Check in cwd
    $localCheck = Join-Path "$LocalPath" "Scripts\Activate.ps1"
    if (Test-Path -Path "$localCheck") {
        . "$localCheck"
        return
    } elseif (Test-Path -Path ".\.python-version") {
        $name = Get-Content -TotalCount 1 ".\.python-version"
    } else {
        $name = (Get-Location).Path | Split-Path -Leaf
    }
    $check = Join-Path "$Path" "$name\Scripts\Activate.ps1"
    if (Test-Path -Path "$check") {
        . "$check"
    } else {
        Write-Output "Cannot find any activation script`n`t$localCheck`n`t$check"
    }
}
{{ end }}
