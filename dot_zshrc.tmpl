{{- $gpg_path := "" -}}
{{- if .is.mac -}}
{{- $gpg_path = print .chezmoi.homeDir "/.gnupg/S.gpg-agent.extra" -}}
{{- else if .is.windows -}}
{{- $gpg_path = "127.0.0.1:4742" -}}
{{- else -}}
{{- $gpg_path = print "/run/user/" .chezmoi.uid "/gnupg/S.gpg-agent.extra" -}}
{{- end -}}
{{ range .source }}{{ if stat . }}
source {{ . -}}
{{ end }}{{- end }}

[[ -d ~/.zsh/completion ]] && fpath=(~/.zsh/completion $fpath) && autoload -Uz compinit && compinit -i

# Don't save failed commands
zshaddhistory() { whence ${${(z)1}[1]} >| /dev/null || return 1 }
setopt hist_ignore_dups
setopt hist_expire_dups_first
unsetopt correct

# Confirm function
confirm () {
    echo -n "Confirm $1 on ${HOST}? "
    read reply

    case $reply in
        [Yy]* ) $1 "${@:2}";;
        * ) echo "$* cancelled";;
    esac
}

{{- if lookPath "dotnet" }}
_dotnet_zsh_complete()
{
    local completions=("$(dotnet complete "$words")")

    reply=( "${(ps:\n:)completions}" )
}

compctl -K _dotnet_zsh_complete dotnet
{{- end }}

{{ if lookPath "tmux" }}
tmux-vertical() {
    if [[ $# -lt 3 ]]; then
        echo "Usage: NAME COMMAND COMMAND ..."
        return 1
    fi
    local name="$1"
    shift
    local cmd_one="$1"
    shift
    tmux new -s "$name" "$cmd_one" \; $(for c in "$@"; do printf ' split-window "%s" ;' "$c"; done) select-layout even-vertical || tmux attach -t "$name"
}
{{ end }}

{{ if lookPath "paru" }}
paru-rebuild-py() {
    if [[ $# -lt 1 ]]; then
        echo "Usage: VERSION"
        return 1
    fi
    paru -S --rebuild --noconfirm $(paru -Qqo /usr/lib/python"$1"/)
}
{{ end }}

# https://www.reddit.com/r/archlinux/comments/13apva0/after_upgrading_to_python_3113_all_my_user_global/jj7ssmy/
pip-reinstall-old() {
    if [[ $# -lt 1 ]]; then
        echo "Usage: VERSION"
        return 1
    fi
    pip install $(pip list --path $HOME/.local/lib/python"$1"/site-packages --format=freeze | sed 's/==.*//') -U
}

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

if command -v pyenv &>/dev/null; then
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"

    pyenv-replace () {
        [[ $# -lt 2 ]] && echo "Usage: pyenv-replace <venv> <version>" && return
        pyenv install -s "$2" || return
        pyenv uninstall -f "$1" || return
        pyenv virtualenv "$2" "$1" || return
        pyenv activate "$1" || return
        python3 -m pip install -U pip wheel setuptools || return
        [[ -f "requirements.txt" ]] && python3 -m pip install -U -r requirements.txt
        [[ -f "requirements_dev.txt" ]] && python3 -m pip install -U -r requirements_dev.txt
    }
fi

# https://github.com/ned300889/i3-configs/blob/master/zshrc
fed() {
  vim -p -o $(find . -type f  | fzf -m --preview '[[ $(file --mime {}) =~ binary ]] && echo {} is a binary file || bat --style=numbers --color=always {}' --bind "ctrl-f:preview-page-down,ctrl-b:preview-page-up,ctrl-q:abort")
}

fli() {
  fzf -m --preview --bind "ctrl-f:preview-page-down,ctrl-b:preview-page-up,ctrl-q:abort" '[[ $(file --mime {}) =~ binary ]] && echo {} is a binary file || bat --style=numbers --color=always {}' | xargs ls -lha
}

# https://gist.github.com/junegunn/f4fca918e937e6bf5bad#gistcomment-2731105

fgh() {
  git log "$@" --graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"  | \
   fzf --ansi --no-sort --reverse --tiebreak=index --preview \
   'f() { set -- $(echo -- "$@" | grep -o "[a-f0-9]\{7\}"); [ $# -eq 0 ] || git show --color=always $1 ; }; f {}' \
   --bind "alt-y:execute:echo {} | grep -o '[a-f0-9]\{7\}' | head -1 | xclip" \
   --bind "ctrl-f:preview-page-down,ctrl-b:preview-page-up,ctrl-q:abort,ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF" --preview-window=right:60%
}

ansible-only-changed() {
    case $1 in
        [Nn]*)
            unset ANSIBLE_DISPLAY_OK_HOSTS ANSIBLE_DISPLAY_SKIPPED_HOSTS
            echo "Ansible defaults restored"
            ;;
        *)
            export ANSIBLE_DISPLAY_OK_HOSTS=false
            export ANSIBLE_DISPLAY_SKIPPED_HOSTS=false
            echo "Only changes will be displayed"
            ;;
    esac
}

# Allow scp and rsync globbing
# https://github.com/sorin-ionescu/prezto/blob/9195b66161b196238cbd52a8a4abd027bdaf5f73/modules/utility/init.zsh#L41
unalias rsync scp sftp

# Aliases

alias reboot='confirm reboot'
alias poweroff='confirm poweroff'
alias shutdown='confirm shutdown'
alias cpp='rsync -avh --no-compress --progress'
alias mvp='rsync -avh --no-compress --progress --remove-source-files'
alias git-alt='git config user.email "{{ .git.alt_email }}" && git config user.name "{{ .git.alt_name }}"'
alias git-main='git config user.email "{{ .git.main_email }}" && git config user.name "{{ .git.main_name }}" && git config user.signingkey "{{ .gpg.main }}"'
alias git-work='git config user.email "{{ .work.git_email }}" && git config user.name "{{ .work.git_name }}" && git config user.signingkey "{{ .gpg.work }}"'
alias git-sign='git config commit.gpgsign true'
alias git-no-sign='git config commit.gpgsign false'
alias pip-req='python3 -m pip install -U pip wheel setuptools && python3 -m pip install -U -r requirements.txt'
alias pip-req-dev='python3 -m pip install -U -r requirements_dev.txt'
alias ssh-nh='ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
alias scp-nh='scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
alias ssh-nk='ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no'
alias rsync-nh="rsync -e 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'"
alias rsync-sudo="rsync --rsync-path='sudo rsync'"
alias rsync-sudo-nh="rsync --rsync-path='sudo rsync' -e 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'"
alias ssh-gpg='ssh -A -o ControlMaster=auto -o ControlPath=~/.ssh/cm-gpg-%r@%h:%p -R /run/user/1000/gnupg/S.gpg-agent:{{ $gpg_path }}'
alias tmux-ssh-sock='eval $(tmux showenv -s SSH_AUTH_SOCK)'
{{- if and .is.linux (not .is.server) (not .is.root) (lookPath "bluetoothctl") }}
alias bt-mx='bluetoothctl power on && bluetoothctl connect 04:5D:4B:52:86:4B'
alias bt-buds='bluetoothctl power on && bluetoothctl connect F4:7D:EF:0C:BE:02'
alias bt-jabra='bluetoothctl power on && bluetoothctl connect 30:50:75:11:EF:92'
alias bt-edifier='bluetoothctl power on && bluetoothctl connect 60:F4:3A:71:1A:BA'
alias bt-on='bluetoothctl power on'
alias bt-off='bluetoothctl power off'
{{- end }}
{{- if lookPath "docker" }}
alias dls='docker container ls -a --format "table {{ "{{.Names}}" }}\t{{ "{{.Status}}" }}\t{{ "{{.RunningFor}}" }}\t"'
alias dports='docker container ls -a --format "table {{ "{{.Names}}" }}\t{{ "{{.Ports}}" }}"'
alias dlog='docker logs -f'
alias dex='docker exec -t'
alias dsti='docker container start -i'
{{- end }}
{{- if lookPath "podman" }}
alias podls='podman container ls -a --sort names --format "table {{ "{{.Names}}" }}  {{ "{{.Status}}" }}  {{ "{{.Created}}" }}"'
alias podlog='podman logs -f'
alias podex='podman exec -t'
alias podsti='podman container start -i'
{{- end }}
{{- if and (lookPath "virsh") (not .is.root) }}
alias virsh='virsh --connect qemu:///system'
alias virt-install='virt-install --connect qemu:///system'
{{- end }}
{{- if not .is.mac }}
{{- if eq .chezmoi.osRelease.id "arch" }}
alias autoremove='{{if not .is.root}}sudo {{ end }}pacman -Rcns $(pacman -Qdtq)'
{{- end }}
{{- else }}
if [[ -d /usr/local/share/zsh-completions ]]; then
    if (( ! ${fpath[(I)/usr/local/share/zsh-completions]} )); then
        fpath=(/usr/local/share/zsh-completions $fpath)
    fi
fi
if [[ -d /opt/homebrew/share/zsh/site-functions ]]; then
    if (( ! ${fpath[(I)/opt/homebrew/share/zsh/site-functions]} )); then
        fpath=(/opt/homebrew/share/zsh/site-functions $fpath)
    fi
fi
{{- end }}
{{- if .is.root }}
alias chezmoi='chezmoi --source "/home/andrei/.local/share/chezmoi"'
alias gita='sudo -u andrei git'
alias logs-nginx='tail $(find /var/log/nginx -type f -printf " -f %p")'
{{- end }}
alias cd-chezmoi="cd $(chezmoi source-path)"

[ ! $DISPLAY ] && export GPG_TTY=$(tty)

[[ -f ~/.config/override/zshrc ]] && source ~/.config/override/zshrc
