{{- $not_server := ne .chezmoi.hostname "DreSRV" -}}
{{- $not_desktop := ne .chezmoi.hostname "desktop" -}}
{{- $not_laptop := ne .chezmoi.hostname "laptop" -}}
{{- $is_work := eq .chezmoi.hostname .work.ws_name -}}
{{- $not_root := ne .chezmoi.username "root" -}}
{{- $is_mac := eq .chezmoi.os "darwin" -}}
{{- $is_linux := eq .chezmoi.os "linux" -}}

{{- range .check.source }}
{{ if . }}source {{ . }}{{ end }}
{{- end }}

# Don't save failed commands
zshaddhistory() { whence ${${(z)1}[1]} >| /dev/null || return 1 }
setopt hist_ignore_dups
setopt hist_expire_dups_first
unsetopt correct

# Confirm function
confirm () {
    echo -n "Confirm $1 on ${HOST}? "
    read reply

    case $reply in
        [Yy]* ) $1 "${@:2}";;
        * ) echo "$* cancelled";;
    esac
}

{{- if has "dotnet" .check.exec }}
_dotnet_zsh_complete() 
{
    local completions=("$(dotnet complete "$words")")

    reply=( "${(ps:\n:)completions}" )
}

compctl -K _dotnet_zsh_complete dotnet
{{- end }}

[[ $commands[kubectl] ]] && source <(kubectl completion zsh)

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

{{- if has "pyenv" .check.exec }}
if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
fi

pyenv-replace () {
    [[ $# -lt 2 ]] && echo "Usage: pyenv-replace <venv> <version>" && return
    pyenv install -s "$2" || return
    pyenv uninstall -f "$1" || return
    pyenv virtualenv "$2" "$1" || return
    pyenv activate "$1" || return
    python3 -m pip install -U pip wheel setuptools || return
    [[ -f "requirements.txt" ]] && python3 -m pip install -U -r requirements.txt
    [[ -f "requirements_dev.txt" ]] && python3 -m pip install -U -r requirements_dev.txt
}
{{- end }}

# Aliases

alias reboot='confirm reboot'
alias poweroff='confirm poweroff'
alias shutdown='confirm shutdown'
alias cpp='rsync -avh --no-compress --progress'
alias mvp='rsync -avh --no-compress --progress --remove-source-files'
alias git-alt='git config user.email "{{ .git.alt_email }}" && git config user.name "{{ .git.alt_name }}"'
alias git-main='git config user.email "{{ .git.main_email }}" && git config user.name "{{ .git.main_name }}" && git config user.signingkey "{{ .git.main_key }}"'
alias git-work='git config user.email "{{ .work.git_email }}" && git config user.name "{{ .work.git_name }}" && git config user.signingkey "{{ .work.git_key }}"'
alias git-sign='git config commit.gpgsign true'
alias pip-req='python3 -m pip install -U pip wheel setuptools && python3 -m pip install -U -r requirements.txt'
alias pip-req-dev='python3 -m pip install -U -r requirements_dev.txt'
alias ssh-no-host='ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
{{- if and $is_linux $not_server $not_root }}
alias bt-mx='bluetoothctl power on && bluetoothctl connect 04:5D:4B:52:86:4B'
alias bt-buds='bluetoothctl power on && bluetoothctl connect F4:7D:EF:0C:BE:02'
alias bt-jabra='bluetoothctl power on && bluetoothctl connect 30:50:75:11:EF:92'
alias bt-off='bluetoothctl power off'
{{- end }}
{{- range $k, $v := .check.files }}
{{ if ne $v "" }}alias logs-{{ $k }}='tail -f {{ $v }}'{{ end }}
{{- end }}
{{- if has "docker" .check.exec }}
alias dls='docker container ls -a --format "table {{ "{{.Names}}" }}\t{{ "{{.Status}}" }}\t{{ "{{.RunningFor}}" }}\t"'
alias dports='docker container ls -a --format "table {{ "{{.Names}}" }}\t{{ "{{.Ports}}" }}"'
alias dlog='docker logs -f'
alias dex='docker exec -t'
alias dsti='docker container start -i'
{{- end }}
{{- if has "podman" .check.exec }}
{{- if $not_root }}
alias podman='sudo podman'
{{- end }}
alias podls='podman container ls -a --sort names --format "table {{ "{{.Names}}" }}  {{ "{{.Status}}" }}  {{ "{{.Created}}" }}"'
alias podlog='podman logs -f'
alias podex='podman exec -t'
alias podsti='podman container start -i'
{{- end }}
{{- if and (has "virsh" .check.exec) ($not_root) }}
alias virsh='virsh --connect qemu:///system'
alias virt-install='virt-install --connect qemu:///system'
{{- end }}
{{- if not $is_mac }}
{{- if eq .chezmoi.osRelease.id "arch" }}
alias autoremove='{{if $not_root}}sudo {{ end }}pacman -Rcns $(pacman -Qdtq)'
{{- end }}
{{- end }}
{{- if not $not_root }}
alias chezmoi='chezmoi --source "/home/andrei/.local/share/chezmoi"'
alias gita='sudo -u andrei git'
alias logs-nginx='tail $(find /var/log/nginx -type f -printf " -f %p")'
{{- end }}
alias cd-chezmoi="cd $(chezmoi source-path)"
{{- if $is_work }}
alias ws-mon='tmux new -s mon "htop -d10" \; split-window "journalctl -f" \; select-layout even-vertical || tmux attach -t mon'
{{- else }}
alias ws-mon="ssh -t ws 'tmux new -s mon \"htop -d10\" \; split-window \"journalctl -f\" \; select-layout even-vertical || tmux attach -t mon'"
{{- end }}

[ ! $DISPLAY ] && export GPG_TTY=$(tty)
