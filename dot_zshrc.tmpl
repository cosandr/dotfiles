{{- range splitList " " .src_list }}
{{ if . }}source {{ . }}{{ end }}
{{- end }}

# Don't save failed commands
zshaddhistory() { whence ${${(z)1}[1]} >| /dev/null || return 1 }
setopt hist_ignore_dups
setopt hist_expire_dups_first
unsetopt correct

dirbg='white'
dirfg='black'

#
# P9K
#

DEFAULT_USER=andrei
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(dir_writable dir vcs pyenv)
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status history context)
POWERLEVEL9K_DIR_SHOW_WRITABLE=false
POWERLEVEL9K_ALWAYS_SHOW_CONTEXT=true
POWERLEVEL9K_CONTEXT_DEFAULT_FOREGROUND='white'
POWERLEVEL9K_CONTEXT_ROOT_FOREGROUND='red'
POWERLEVEL9K_CONTEXT_SUDO_FOREGROUND='orange'
POWERLEVEL9K_CONTEXT_REMOTE_FOREGROUND='wheat1'
POWERLEVEL9K_CONTEXT_REMOTE_SUDO_FOREGROUND='yellow1'
# Backgrounds
POWERLEVEL9K_DIR_DEFAULT_BACKGROUND=$dirbg
POWERLEVEL9K_DIR_HOME_BACKGROUND=$dirbg
POWERLEVEL9K_DIR_HOME_SUBFOLDER_BACKGROUND=$dirbg
POWERLEVEL9K_DIR_ETC_BACKGROUND=$dirbg
POWERLEVEL9K_DIR_WRITABLE_FORBIDDEN_BACKGROUND=$dirbg
# Foregrounds
POWERLEVEL9K_DIR_DEFAULT_FOREGROUND=$dirfg
POWERLEVEL9K_DIR_HOME_FOREGROUND=$dirfg
POWERLEVEL9K_DIR_HOME_SUBFOLDER_FOREGROUND=$dirfg
POWERLEVEL9K_DIR_ETC_FOREGROUND=$dirfg
POWERLEVEL9K_DIR_WRITABLE_FORBIDDEN_FOREGROUND=$dirfg

alias cpp='rsync -avh --no-compress --progress'
alias mvp='rsync -avh --no-compress --progress --remove-source-files'
alias git-cosandr='git config user.email "{{ .private_email }}" && git config user.name "{{ .private_name }}"'
alias dls='docker container ls -a --format "table {{ "{{.Names}}" }}\t{{ "{{.Status}}" }}\t{{ "{{.RunningFor}}" }}\t"'
export PATH="$HOME/.local/bin:$PATH"
{{- $avail_list := splitList " " .avail_list -}}
{{- if has "corefreq-cli" $avail_list }}
alias tmux-mon='tmux new -s mon  "htop -d10" \; split-window "corefreq-cli" \; select-layout even-vertical'
{{- end }}
{{- if has "pyenv" $avail_list }}
# pyenv
export PYENV_ROOT={{ if eq .chezmoi.hostname "DreSRV" }}"/opt/pyenv"{{else}}"$HOME/.pyenv"{{end}}
export PATH="$PYENV_ROOT/bin:$PATH"
export PYENV_VIRTUALENV_DISABLE_PROMPT=1
if command -v pyenv 1>/dev/null 2>&1; then
	eval "$(pyenv init -)"
	eval "$(pyenv virtualenv-init -)"
fi
{{- end }}
{{- if has "go" $avail_list }}
export PATH="$HOME/go/bin:$PATH"
{{- end }}
{{- if has "virsh" $avail_list }}
{{- if ne .chezmoi.username "root" }}
alias virsh='virsh --connect qemu:///system'
alias virt-install='virt-install --connect qemu:///system'
{{- end }}
{{- end }}
{{- if ne .chezmoi.hostname "DreSRV" }}
alias mntsrv='sshfs andrei@{{ .srv_ip }}:/ /mnt/sshfs'
{{- end }}
{{- if eq .chezmoi.osRelease.id "arch" }}
alias autoremove='{{if ne .chezmoi.username "root"}}sudo {{ end }}pacman -Rcns $(pacman -Qdtq)'
{{- end }}
{{- if has "dotnet" $avail_list }}
_dotnet_zsh_complete() 
{
  local completions=("$(dotnet complete "$words")")

  reply=( "${(ps:\n:)completions}" )
}

compctl -K _dotnet_zsh_complete dotnet
{{- end }}
{{- if has "cargo" $avail_list }}
export PATH="$HOME/.cargo/bin:$PATH"
{{- end }}
{{- if eq .chezmoi.hostname "DreSRV" }}
export GPG_TTY=$(tty)
{{- end }}
{{- if has "go-motd" $avail_list }}
go-motd -cfg /opt/go-motd.yaml
{{- end }}
{{- if contains "Microsoft" .chezmoi.osRelease.id}}
[ -n ${WSL_AUTH_SOCK} ] && export SSH_AUTH_SOCK=${WSL_AUTH_SOCK}
export GDK_SCALE=2
export QT_SCREEN_SCALE_FACTORS=2
export QT_AUTO_SCREEN_SCALE_FACTOR=0
export DISPLAY=localhost:0.0
eval $(/mnt/c/Users/Andrei/Documents/ssh-agent-wsl/ssh-agent-wsl -r)
{{- end }}
{{- if eq .chezmoi.username "root" }}
alias chezmoi='chezmoi --source "/home/andrei/.local/share/chezmoi"'
alias gita='sudo -u andrei git'
{{- end}}
